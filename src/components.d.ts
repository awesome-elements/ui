/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ButtonVariant } from "./components/awesome-button/awesome-button";
export namespace Components {
    interface AwesomeBadge {
    }
    interface AwesomeButton {
        /**
          * The flag of disabling the button. Default to `false`.
         */
        "disabled": boolean;
        /**
          * If presents, the button would act like an `a` tag using the given `href`.
         */
        "href"?: string;
        /**
          * Variant of the button. Default to `solid`.
         */
        "variant": ButtonVariant;
    }
    interface AwesomeDivider {
    }
}
declare global {
    interface HTMLAwesomeBadgeElement extends Components.AwesomeBadge, HTMLStencilElement {
    }
    var HTMLAwesomeBadgeElement: {
        prototype: HTMLAwesomeBadgeElement;
        new (): HTMLAwesomeBadgeElement;
    };
    interface HTMLAwesomeButtonElement extends Components.AwesomeButton, HTMLStencilElement {
    }
    var HTMLAwesomeButtonElement: {
        prototype: HTMLAwesomeButtonElement;
        new (): HTMLAwesomeButtonElement;
    };
    interface HTMLAwesomeDividerElement extends Components.AwesomeDivider, HTMLStencilElement {
    }
    var HTMLAwesomeDividerElement: {
        prototype: HTMLAwesomeDividerElement;
        new (): HTMLAwesomeDividerElement;
    };
    interface HTMLElementTagNameMap {
        "awesome-badge": HTMLAwesomeBadgeElement;
        "awesome-button": HTMLAwesomeButtonElement;
        "awesome-divider": HTMLAwesomeDividerElement;
    }
}
declare namespace LocalJSX {
    interface AwesomeBadge {
    }
    interface AwesomeButton {
        /**
          * The flag of disabling the button. Default to `false`.
         */
        "disabled"?: boolean;
        /**
          * If presents, the button would act like an `a` tag using the given `href`.
         */
        "href"?: string;
        /**
          * Variant of the button. Default to `solid`.
         */
        "variant"?: ButtonVariant;
    }
    interface AwesomeDivider {
    }
    interface IntrinsicElements {
        "awesome-badge": AwesomeBadge;
        "awesome-button": AwesomeButton;
        "awesome-divider": AwesomeDivider;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "awesome-badge": LocalJSX.AwesomeBadge & JSXBase.HTMLAttributes<HTMLAwesomeBadgeElement>;
            "awesome-button": LocalJSX.AwesomeButton & JSXBase.HTMLAttributes<HTMLAwesomeButtonElement>;
            "awesome-divider": LocalJSX.AwesomeDivider & JSXBase.HTMLAttributes<HTMLAwesomeDividerElement>;
        }
    }
}
